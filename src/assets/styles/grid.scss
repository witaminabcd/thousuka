// ФУНКЦИИ сетки

// Переводит количество колонок в проценты
// @return - {Number} - возвращает ширину колонки в процентах
@function column($number: 1, $of: $grid-columns) {
    @return percentage($number / $of);
}

// Контейнер - вычисляем единицы определяем ширину.
// @return - {Number} - возвращает ширину контейнера в исходных единицах или px
@function container($width: auto) {

  @if $width == auto {
    $width: $width;
  } @else if type-of($width) == "number" {
      @if unitless($width) == true {
        $width: numberToPx($width);
      } @else {
        $width: $width;
      }
  } @else {
    // если $width не валидная строка вернуть auto;
    $width: auto;
  }

  @return $width;
}

// Контейнер - указываем максимальную ширину и центрирует контент
@mixin container($container-list: $grid-container) {
  @each $breakpoint-name, $breakpoint-value in $breakpoints-list {
    @if $breakpoint-name == 'mobile' {
      max-width: 100%;
      margin-left: auto;
      margin-right: auto;
      width: container(map_get($container-list, $breakpoint-name));
    } @else {
      @media #{$breakpoint-value} {
        margin-left: auto;
        margin-right: auto;
        max-width: container(map_get($container-list, $breakpoint-name));
        width: container(map_get($container-list, $breakpoint-name));
      }
    }
  }
  //overflow-x: hidden;
}

// Создает строку
@mixin row() {
  display: flex;
  flex-wrap: wrap;

  @if $grid-indents {
    @each $breakpoint-name, $breakpoint-value in $breakpoints-list {
      @if map_get($grid-indents, $breakpoint-name) > 0 {
        @if $breakpoint-name == 'mobile' {
          margin-left: map_get($grid-indents, 'mobile') / 2 * -1px;
          margin-right: map_get($grid-indents, 'mobile') / 2 * -1px;
        } @else {
          @media #{$breakpoint-value} {
            margin-left: map_get($grid-indents, $breakpoint-name) / 2 * -1px;
            margin-right: map_get($grid-indents, $breakpoint-name) / 2 * -1px;
          }
        }
      }
    }
  }
}

// Создает колонку
// $number - {Number} - количество колонок
// $of - {Number} - из какого количества колонок;  по умолчанию = $grid-columns
@mixin column($number: 1, $of: $grid-columns) {
  flex-basis: column($number, $of);
  max-width: column($number, $of);
  flex-grow: 1;

  @if $grid-indents {
    @each $breakpoint-name, $breakpoint-value in $breakpoints-list {
      @if map_get($grid-indents, $breakpoint-name) > 0 {
        @if $breakpoint-name == 'mobile' {
          padding-left: map_get($grid-indents, 'mobile') / 2 * 1px;
          padding-right: map_get($grid-indents, 'mobile') / 2 * 1px;
        } @else {
          @media #{$breakpoint-value} {
            padding-left: map_get($grid-indents, $breakpoint-name) / 2 * 1px;
            padding-right: map_get($grid-indents, $breakpoint-name) / 2 * 1px;
          }
        }
      }
    }
  }
}

// margin left
// $number - {Number} - количество колонок
// $of - {Number} - из какого количества колонок;  по умолчанию из $grid-columns
@mixin push($number, $of: $grid-columns) {
  margin-left: column($number, $of);
}

// margin right
// $number - {Number} - количество колонок
// $of - {Number} - из какого количества колонок;  по умолчанию из $grid-columns
@mixin post($number, $of: $grid-columns) {
  margin-right: column($number, $of);
}
